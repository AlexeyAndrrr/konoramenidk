const express = require('express');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname)));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
    next();
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é
app.get('/menu', (req, res) => {
    res.sendFile(path.join(__dirname, 'menu.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤
app.get('/reviews', (req, res) => {
    res.sendFile(path.join(__dirname, 'reviews.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
app.get('/api/branches', (req, res) => {
    const branches = [
        {
            id: 1,
            name: 'KONO –¶–µ–Ω—Ç—Ä',
            address: '—É–ª. –ì–ª–∞–≤–Ω–∞—è, 123',
            coordinates: [55.7558, 37.6176]
        },
        {
            id: 2,
            name: 'KONO –°–µ–≤–µ—Ä',
            address: '–ø—Ä. –°–µ–≤–µ—Ä–Ω—ã–π, 45',
            coordinates: [55.8358, 37.6176]
        },
        {
            id: 3,
            name: 'KONO –Æ–≥',
            address: '—É–ª. –Æ–∂–Ω–∞—è, 67',
            coordinates: [55.6758, 37.6176]
        },
        {
            id: 4,
            name: 'KONO –ó–∞–ø–∞–¥',
            address: '—É–ª. –ó–∞–ø–∞–¥–Ω–∞—è, 89',
            coordinates: [55.7558, 37.5176]
        },
        {
            id: 5,
            name: 'KONO –í–æ—Å—Ç–æ–∫',
            address: '–ø—Ä. –í–æ—Å—Ç–æ—á–Ω—ã–π, 12',
            coordinates: [55.7558, 37.7176]
        }
    ];
    
    res.json(branches);
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
app.get('/api/reviews/:branchId', (req, res) => {
    const branchId = parseInt(req.params.branchId);
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    const reviews = {
        1: [
            {
                id: 1,
                name: '–ê–Ω–Ω–∞',
                rating: 5,
                text: '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω! –ë–ª—é–¥–∞ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω—ã–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —É—é—Ç–Ω–∞—è. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Å—å —Å–Ω–æ–≤–∞!',
                date: '2 –¥–Ω—è –Ω–∞–∑–∞–¥'
            },
            {
                id: 2,
                name: '–î–º–∏—Ç—Ä–∏–π',
                rating: 4,
                text: '–•–æ—Ä–æ—à–∞—è –µ–¥–∞, –±—ã—Å—Ç—Ä–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –¶–µ–Ω—ã –ø—Ä–∏–µ–º–ª–µ–º—ã–µ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.',
                date: '1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥'
            }
        ],
        2: [
            {
                id: 3,
                name: '–ú–∏—Ö–∞–∏–ª',
                rating: 4,
                text: '–•–æ—Ä–æ—à–∞—è –µ–¥–∞, –Ω–æ –¥–æ–ª–≥–æ –≥–æ—Ç–æ–≤–∏–ª–∏. –ü–µ—Ä—Å–æ–Ω–∞–ª –≤–µ–∂–ª–∏–≤—ã–π, –ø–æ—Ä—Ü–∏–∏ –±–æ–ª—å—à–∏–µ.',
                date: '1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥'
            }
        ],
        3: [
            {
                id: 4,
                name: '–ï–ª–µ–Ω–∞',
                rating: 5,
                text: '–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π —Ä–∞–º–µ–Ω! –°–∞–º—ã–π –≤–∫—É—Å–Ω—ã–π –≤ –≥–æ—Ä–æ–¥–µ. –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∫–∞–∫ –≤ –Ø–ø–æ–Ω–∏–∏.',
                date: '2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥'
            },
            {
                id: 5,
                name: '–°–µ—Ä–≥–µ–π',
                rating: 5,
                text: '–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ —É–∂–∏–Ω–∞. –î–µ—Ç–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!',
                date: '3 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥'
            }
        ],
        4: [],
        5: []
    };
    
    res.json(reviews[branchId] || []);
});

// API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
app.post('/api/reviews', (req, res) => {
    const { name, rating, text, branchId } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !rating || !text || !branchId) {
        return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' });
    }
    
    if (rating < 1 || rating > 5) {
        return res.status(400).json({ error: '–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5' });
    }
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log('–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:', { name, rating, text, branchId, date: new Date() });
    
    res.json({ 
        success: true, 
        message: '–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
        review: {
            id: Date.now(),
            name,
            rating,
            text,
            date: '–¢–æ–ª—å–∫–æ —á—Ç–æ'
        }
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞–µ–≤—ã—Ö
app.get('/api/tips/stats', (req, res) => {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = {
        totalAmount: 12450,
        totalPeople: 247,
        totalBranches: 5,
        recentTips: [
            { amount: 500, branch: 'KONO –¶–µ–Ω—Ç—Ä', date: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥' },
            { amount: 200, branch: 'KONO –Æ–≥', date: '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥' },
            { amount: 1000, branch: 'KONO –°–µ–≤–µ—Ä', date: '2 –¥–Ω—è –Ω–∞–∑–∞–¥' }
        ]
    };
    
    res.json(stats);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
    res.status(404).sendFile(path.join(__dirname, '404.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.use((err, req, res, next) => {
    console.error('Server Error:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ KONO —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
    console.log(`üì± –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    process.exit(0);
});
